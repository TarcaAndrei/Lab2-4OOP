        -:    0:Source:C:/Users/Andrei/Documents/Facultate/Semestrul_II/Programare orientata obiect/Laboratoare/Lab2-4/service/service.c
        -:    0:Graph:C:\Users\Andrei\Documents\Facultate\Semestrul_II\Programare orientata obiect\Laboratoare\Lab2-4\cmake-build-debug-coverage\CMakeFiles\Lab2_4.dir\service\service.c.gcno
        -:    0:Data:C:\Users\Andrei\Documents\Facultate\Semestrul_II\Programare orientata obiect\Laboratoare\Lab2-4\cmake-build-debug-coverage\CMakeFiles\Lab2_4.dir\service\service.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Andrei on 10.03.2023.
        -:    3://
        -:    4:
        -:    5:#include <malloc.h>
        -:    6:#include <string.h>
        -:    7:#include "service.h"
        -:    8:#include "../utilities/filtrari.h"
        -:    9:#include "../utilities/sortare.h"
        -:   10:
function constructor_service called 2 returned 100% blocks executed 100%
        2:   11:PtrServiceOferte constructor_service(PtrRepositoryOferte ptr_repo, PtrValidareOferta ptr_valid)
        -:   12:/**
        -:   13: * constructorul unui strunct de tip Service
        -:   14: * @param ptr_repo pointerul catre structul de tip repository
        -:   15: * @param ptr_valid pointerul catre structul de tip validator
        -:   16: * @return pointer catre structul service creat
        -:   17: */
        -:   18:{
        2:   19:    PtrServiceOferte service_nou = (PtrServiceOferte) malloc(sizeof(ServiceOferte));
        2:   20:    service_nou->validator = ptr_valid;
        2:   21:    service_nou->repository = ptr_repo;
        2:   22:    return service_nou;
        2:   22-block  0
        -:   23:}
        -:   24:
function destructor_service called 2 returned 100% blocks executed 100%
        2:   25:void destructor_service(PtrServiceOferte ptr_service)
        -:   26:/**
        -:   27: * destructorul serviceului
        -:   28: * @param ptr_service pointerul catre structul de tip service care urmeaza sa fie dealocat
        -:   29: */
        -:   30:{
        2:   31:    destructor_repository(ptr_service->repository);
        2:   31-block  0
call    0 returned 2
        2:   32:    destructor_validator(ptr_service->validator);
call    0 returned 2
        2:   33:    free(ptr_service);
        2:   34:}
        -:   35:
function adauga_oferta_service called 11 returned 100% blocks executed 100%
       11:   36:int adauga_oferta_service(PtrServiceOferte ptr_service, int id_oferta, char *tip, char *destinatie, char *data_plecare, double pret)
        -:   37:/**
        -:   38: * functia de creare si adaugare in repository de oferta noua cu argumentele primite prin parametrii
        -:   39: * @param ptr_service pointer catre structul de tip service cu care se lucreaza
        -:   40: * @param id_oferta intreg pozitiv reprezentand id-ul viitoarei oferte
        -:   41: * @param tip string nevid din multimea {Mare, Munte, City Break} reprezentand tipul viitoarei oferte
        -:   42: * @param destinatie string de cel putin 2 caractere reprezentand destinatiei viitoarei oferte
        -:   43: * @param data_plecare string de forma <zz/ll/aaaa> reprezentand data de inceput a viitoarei oferte
        -:   44: * @param pret double pozitiv reprezentand pretul viitoarei oferte
        -:   45: * @return diferite coduri de eroare
        -:   46: *                  @return 0 daca oferta creata a fost adaugata cu succes in repository
        -:   47: *                          2 daca oferta creata nu a fost adaugata in repository deoarece exista alta cu acelasi id
        -:   48: *                          un cod de eroare format dintr-un numar abcde, unde:
        -:   49: *                              daca a == 1 => "ID invalid!"
        -:   50: *                              daca b == 1 => "Tip oferta invalid!"
        -:   51: *                              daca c == 1 => "Destinatie invalida!"
        -:   52: *                              daca d == 1 => "Data plecare invalida!"
        -:   53: *                              daca e == 1 => "Pret invalid!"
        -:   54: */
        -:   55:{
        -:   56:    PtrOferta oferta_noua;
       11:   57:    oferta_noua = constructor_oferta(id_oferta, tip, destinatie, data_plecare, pret);
       11:   57-block  0
call    0 returned 11
       11:   58:    if(verifica_oferta(oferta_noua) == 0){
call    0 returned 11
branch  1 taken 10 (fallthrough)
branch  2 taken 1
       10:   59:        if(adauga_oferta(ptr_service->repository, oferta_noua) == 0){
       10:   59-block  0
call    0 returned 10
branch  1 taken 8 (fallthrough)
branch  2 taken 2
        8:   60:            return 0;
        8:   60-block  0
        -:   61:        }
        2:   62:        destructor_oferta(oferta_noua);
        2:   62-block  0
call    0 returned 2
        2:   63:        return 2;
        -:   64:    }
        1:   65:    int cod_eroare = verifica_oferta(oferta_noua);
        1:   65-block  0
call    0 returned 1
        1:   66:    destructor_oferta(oferta_noua);
call    0 returned 1
        1:   67:    return cod_eroare;
        -:   68:}
        -:   69:
function get_numar_oferte_service called 13 returned 100% blocks executed 100%
       13:   70:int get_numar_oferte_service(PtrServiceOferte ptr_service)
        -:   71:/**
        -:   72: * returneaza numarul lista de oferte din repository
        -:   73: * @param ptr_service pointer catre structul de tip service cu care se lucreaza
        -:   74: * @return numarul elementelor de tip pointeri catre structurile de tip oferta din repository
        -:   75: */
        -:   76:{
       13:   77:    return get_lungime_repository(ptr_service->repository);
       13:   77-block  0
call    0 returned 13
        -:   78:}
        -:   79:
function sterge_oferta_service called 3 returned 100% blocks executed 100%
        3:   80:int sterge_oferta_service(PtrServiceOferte ptr_service, int id_oferta)
        -:   81:/**
        -:   82: * functia de stergere din repository a unei oferte existente
        -:   83: * @param ptr_service pointer catre structul de tip service cu care se lucreaza
        -:   84: * @param id_oferta intreg pozitiv reprezentand id-ul ofertei ce urmeaza a fi stearsa
        -:   85: * @return diferite coduri de eroare sau succes dupa cum urmeaza:
        -:   86: *                      @return 1 daca functia a sters cu succes oferta
        -:   87: *                              0 daca ID-ul este invalid
        -:   88: *                              2 daca nu exista nicio oferta cu acest id in repository
        -:   89: */
        -:   90:{
        3:   91:    if(id_oferta <= 0)
        3:   91-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   92:        return 0;
        1:   92-block  0
        2:   93:    id_oferta = (int) id_oferta;
        2:   94:    if(get_oferta_cu_id(ptr_service->repository, id_oferta) == NULL){
        2:   94-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   95:        return 2;
        1:   95-block  0
        -:   96:    }
        1:   97:    sterge_oferta(ptr_service->repository, get_oferta_cu_id(ptr_service->repository, id_oferta));
        1:   97-block  0
call    0 returned 1
call    1 returned 1
        1:   98:    return 1;
        -:   99:}
        -:  100:
function modifica_oferta_service called 7 returned 100% blocks executed 100%
        7:  101:int modifica_oferta_service(PtrServiceOferte ptr_service, int id_oferta, char *tip, char *destinatie, char *data_plecare, double pret)
        -:  102:/**
        -:  103: * functia de modificare din repository a unei oferte existente cu argumentele primite prin parametrii
        -:  104: * @param ptr_service pointer catre structul de tip service cu care se lucreaza
        -:  105: * @param id_oferta intreg pozitiv reprezentand id-ul viitoarei oferte
        -:  106: * @param tip string nevid din multimea {Mare, Munte, City Break} reprezentand tipul viitoarei oferte
        -:  107: * @param destinatie string de cel putin 2 caractere reprezentand destinatiei viitoarei oferte
        -:  108: * @param data_plecare string de forma <zz/ll/aaaa> reprezentand data de inceput a viitoarei oferte
        -:  109: * @param pret double pozitiv reprezentand pretul viitoarei oferte
        -:  110: * @return diferite coduri de eroare
        -:  111: *                  @return 0 daca oferta a fost modificata cu succes in repository
        -:  112: *                          2 daca oferta nu a fost modificata deoarece in repository nu exista oferta id-ul primit
        -:  113: *                          un cod de eroare format dintr-un numar abcde, unde:
        -:  114: *                              daca a == 1 => "ID invalid!"
        -:  115: *                              daca b == 1 => "Tip oferta invalid!"
        -:  116: *                              daca c == 1 => "Destinatie invalida!"
        -:  117: *                              daca d == 1 => "Data plecare invalida!"
        -:  118: *                              daca e == 1 => "Pret invalid!"
        -:  119: */
        -:  120:{
        7:  121:    int coduri_eroare = 0;
        -:  122:    PtrOferta ofera_modificat;
        7:  123:    if(id_oferta <= 0)
        7:  123-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1:  124:        coduri_eroare += 1;
        1:  124-block  0
        -:  125:    else{
        6:  126:        if(get_oferta_cu_id(ptr_service->repository, id_oferta) == NULL){
        6:  126-block  0
call    0 returned 6
branch  1 taken 1 (fallthrough)
branch  2 taken 5
        1:  127:            return 2;
        1:  127-block  0
        -:  128:        }
        -:  129:    }
        6:  130:    coduri_eroare*=10;
        -:  131:
        6:  132:    ofera_modificat = get_oferta_cu_id(ptr_service->repository, id_oferta);
        6:  132-block  0
call    0 returned 6
        6:  133:    if(strcmp(tip, "\n") != 0){
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4:  134:        if (!(strcmp(tip, "Munte") == 0 || strcmp(tip, "Mare") == 0 || strcmp(tip, "City Break") == 0))
        4:  134-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  134-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  134-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 1
        1:  135:            coduri_eroare += 1;
        1:  135-block  0
        -:  136:    }
        6:  137:    coduri_eroare *= 10;
        6:  138:    if(strcmp(destinatie, "\n") != 0){
        6:  138-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4:  139:        if (strlen(destinatie) <= 2)
        4:  139-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  140:            coduri_eroare += 1;
        1:  140-block  0
        -:  141:    }
        6:  142:    coduri_eroare*=10;
        6:  143:    if(strcmp(data_plecare, "\n") != 0){
        6:  143-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4:  144:        if (verifica_data(data_plecare) == 0)
        4:  144-block  0
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
        1:  145:            coduri_eroare += 1;
        1:  145-block  0
        -:  146:    }
        6:  147:    coduri_eroare*=10;
        6:  148:    if(pret != 0){
        6:  148-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4:  149:        if (pret <= 0)
        4:  149-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  150:            coduri_eroare += 1;
        1:  150-block  0
        -:  151:    }
        6:  152:    if(coduri_eroare!=0)
        6:  152-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:  153:        return coduri_eroare;
        2:  153-block  0
        4:  154:    if(strcmp(tip, "\n") != 0){
        4:  154-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  155:        modifica_tip_oferta(ptr_service->repository, ofera_modificat, tip);
        3:  155-block  0
call    0 returned 3
        -:  156:    }
        4:  157:    if(strcmp(destinatie, "\n") != 0){
        4:  157-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  158:        modifica_destinatie_oferta(ptr_service->repository, ofera_modificat, destinatie);
        3:  158-block  0
call    0 returned 3
        -:  159:    }
        4:  160:    if(strcmp(data_plecare, "\n") != 0){
        4:  160-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  161:        modifica_data_oferta(ptr_service->repository, ofera_modificat, data_plecare);
        3:  161-block  0
call    0 returned 3
        -:  162:    }
        4:  163:    if(pret != 0){
        4:  163-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  164:        modifica_pret_oferta(ptr_service->repository, ofera_modificat, pret);
        3:  164-block  0
call    0 returned 3
        -:  165:    }
        4:  166:    return 0;
        4:  166-block  0
        -:  167:}
        -:  168:
function get_lista_oferte_service called 9 returned 100% blocks executed 100%
        9:  169:PtrOferta *get_lista_oferte_service(PtrServiceOferte ptr_service)
        -:  170:/**
        -:  171: * returneaza lista de oferte din repository
        -:  172: * @param ptr_service pointer catre structul de tip service cu care se lucreaza
        -:  173: * @return adresa listei de pointeri catre structurile de tip oferta din repository
        -:  174: */
        -:  175:{
        9:  176:    return get_lista_repo_oferte(ptr_service->repository);
        9:  176-block  0
call    0 returned 9
        -:  177:}
        -:  178:
function filtrare_oferte_service called 4 returned 100% blocks executed 100%
        4:  179:PtrOferta *filtrare_oferte_service(PtrServiceOferte ptr_service, int* ptr_lungime_finala, char *optiune, char *string, double pret, char ordine)
        -:  180:/**
        -:  181: * functia de filtrare de oferte din repository in functie de anumiti parametrii
        -:  182: * @param ptr_service pointer catre structul de tip service cu care se lucreaza
        -:  183: * @param ptr_lungime_finala adresa catre intregul in care se va pune lungimea array-ului obtinut
        -:  184: * @param optiune un string din multimea {destinatie, tip, pret} reprezentand criteriul dupa care se face filtrarea
        -:  185: * @param string un string daca e vorba de filtrare dupa destinatie sau tip - elementul cu care vor fi comparate atributele ofertelor
        -:  186: * @param pret un double daca e vorba de filtrare dupa pret
        -:  187: * @param ordine 1 daca e vorba de un pret mai mare si 2 daca e vorba de un pret mai mic
        -:  188: * @return adresa catre array-ul format din elementele ramase dupa aplicarea filtrului
        -:  189: */
        -:  190:{
        4:  191:    int lungime = get_numar_oferte_service(ptr_service);
        4:  191-block  0
call    0 returned 4
        -:  192:    int mod;
        -:  193:    int nr_final;
        4:  194:    PtrOferta *array = get_lista_oferte_service(ptr_service);
call    0 returned 4
        4:  195:    PtrOferta *array_final = (PtrOferta*) malloc(lungime * sizeof(Oferta));
        4:  196:    if(strcmp(optiune, "destinatie") == 0){
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        1:  197:        nr_final = filtrare_destinatie(array, array_final, lungime, string);
        1:  197-block  0
call    0 returned 1
        -:  198:    }
        3:  199:    else if(strcmp(optiune, "tip") == 0) {
        3:  199-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  200:        nr_final = filtrare_tip(array, array_final, lungime, string);
        1:  200-block  0
call    0 returned 1
        -:  201:    }
        -:  202:    else{
        2:  203:        if(ordine == '+')
        2:  203-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  204:            mod = 1;
        1:  204-block  0
        -:  205:        else
        1:  206:            mod = 2;
        1:  206-block  0
        2:  207:        nr_final = filtrare_pret(array, array_final, lungime, pret, mod);
        2:  207-block  0
call    0 returned 2
        -:  208:    }
        4:  209:    *ptr_lungime_finala = nr_final;
        4:  210:    return array_final;
        4:  210-block  0
        -:  211:}
        -:  212:
function autopopulare_service called 1 returned 100% blocks executed 100%
        1:  213:void autopopulare_service(PtrServiceOferte ptr_service) {
        1:  214:    adauga_oferta_service(ptr_service, 20, "Mare", "Venus", "23/07/2023", 3843.28);
        1:  214-block  0
call    0 returned 1
        1:  215:    adauga_oferta_service(ptr_service, 21, "Mare", "Constanta", "18/08/2023", 4832.28);
call    0 returned 1
        1:  216:    adauga_oferta_service(ptr_service, 22, "Munte", "Sinaia", "03/09/2023", 28742.42);
call    0 returned 1
        1:  217:    adauga_oferta_service(ptr_service, 22, "Munte", "Predeal", "12/11/2023", 5327.58);
call    0 returned 1
        1:  218:    adauga_oferta_service(ptr_service, 23, "City Break", "Moldova", "14/05/2023", 3443.28);
call    0 returned 1
        1:  219:    adauga_oferta_service(ptr_service, 24, "City Break", "Banat", "12/10/2023", 1243.28);
call    0 returned 1
        1:  220:    adauga_oferta_service(ptr_service, 25, "City Break", "Europa de Vest", "23/07/2023", 484843.8);
call    0 returned 1
        1:  221:}
        -:  222:
function sortare_oferte_service called 4 returned 100% blocks executed 100%
        4:  223:void sortare_oferte_service(PtrServiceOferte ptr_service, int optiune, char ordine) {
        4:  224:    PtrOferta *array = get_lista_oferte_service(ptr_service);
        4:  224-block  0
call    0 returned 4
        4:  225:    int lungime = get_numar_oferte_service(ptr_service);
call    0 returned 4
        4:  226:    if(optiune == 1){
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:  227:        if(ordine == '+') {
        2:  227-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  228:            sortare_pret(array, lungime, 1);
        1:  228-block  0
call    0 returned 1
        1:  229:            return;
        -:  230:        }
        1:  231:        sortare_pret(array, lungime, 2);
        1:  231-block  0
call    0 returned 1
        1:  232:        return;
        -:  233:    }
        2:  234:    if(ordine == '+'){
        2:  234-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  235:        sortare_destinatie(array, lungime, 1);
        1:  235-block  0
call    0 returned 1
        1:  236:        return;
        -:  237:    }
        1:  238:    sortare_destinatie(array, lungime, 2);
        1:  238-block  0
call    0 returned 1
        -:  239:}
        -:  240:
